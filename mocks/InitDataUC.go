// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/OYE0303/expense-tracker-go/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// InitDataUC is an autogenerated mock type for the InitDataUC type
type InitDataUC struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data, userID
func (_m *InitDataUC) Create(ctx context.Context, data domain.InitData, userID int64) error {
	ret := _m.Called(ctx, data, userID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.InitData, int64) error); ok {
		r0 = rf(ctx, data, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *InitDataUC) List() (domain.InitData, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 domain.InitData
	var r1 error
	if rf, ok := ret.Get(0).(func() (domain.InitData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() domain.InitData); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.InitData)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInitDataUC creates a new instance of InitDataUC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInitDataUC(t interface {
	mock.TestingT
	Cleanup(func())
}) *InitDataUC {
	mock := &InitDataUC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
